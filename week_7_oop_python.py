# -*- coding: utf-8 -*-
"""week_7_OOP_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1eXVAoW5n9CHCxQOIb5wvzSQ53T5xPKwb

# Syntax of creating ***python class***
"""

class NameOfClass():
  def __init__(self, parameter1, parameter2):
    self.parameter1 = parameter1
    self.parameter2 = parameter2
  
  def someMethod(self):
    #perfrom some action 
    print(self.parameter1)

"""# Create a ***Animal class*** """

class Animal():
  def __init__(self, name, colour):
    #arrtibute
    #we take in the argument
    #assgin it using self.arrtibute_name 
    self.name = name
    self.colour = colour
  def running(self):
    print(f'hey! i am {self.name}, now i am running!')
  def drinkingMilk(self):
    print(f'hey! i am {self.name}, now i am drinking mlik!')

"""# Create ***object*** """

tom=Animal('tom', 'gray')
jerry=Animal('jerry', 'browon')

"""# Understanding ***object attribute***"""

print(f'hey! i am {tom.name} and my colour is: {tom.colour}')
print(f'hey! i am {jerry.name} and my colour is: {jerry.colour}')

"""# Understanding ***object behaviour***"""

#print tom behaviour
tom.running()
tom.drinkingMilk()

#print jerry behaviour
jerry.running()
jerry.dilk()

"""# The ***self Parameter***
1.   The **self** parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.
2.   It does not have to be named self , you can call it whatever you like, but it has to be **the first parameter of any function in the class**.
"""

#create class
class Animal():
  def __init__(self, objectName, objectColour):
    #arrtibute
    #we take in the argument
    #assgin it using self.arrtibute_name 
    self.name = objectName
    self.colour = objectColour

#create object
tom=Animal('tom', 'gray')
jerry=Animal('jerry', 'browon')

#printing object attribute, object attribute access with name and colour. 
print(f'hey! i am {tom.name} and my colour is: {tom.colour}')
print(f'hey! i am {jerry.name} and my colour is: {jerry.colour}')

#create class
class Animal():
  def __init__(this, objectName, objectColour):
    #arrtibute
    #we take in the argument
    #assgin it using this.arrtibute_name 
    this.name = objectName
    this.colour = objectColour

#create object
tom=Animal('tom', 'gray')
jerry=Animal('jerry', 'browon')

#printing object attribute, object attribute access with name and colour. 
print(f'hey! i am {tom.name} and my colour is: {tom.colour}')
print(f'hey! i am {jerry.name} and my colour is: {jerry.colour}')

"""# The __init__() Function

1.   The __init__() function is called automatically every time the class is being used to create a new object.
2.   All classes have a function called __init__(), which is always executed when the class is being initiated.

"""

#create class
class Animal():
  def __init__(self):
    print(f'hello! i am init()!')

#create object
tom=Animal()

"""# Class ***object Attribute***
this attribute same for any instance of class
"""

#create class 
class Animal():
  #class object attribute
  #same for any instance of class
  species = 'mammal'
  def __init__(self, name, colour):
    #arrtibute
    #we take in the argument
    #assgin it using self.arrtibute_name 
    self.name = name
    self.colour = colour

#create object
tom=Animal('tom', 'gray')
jerry=Animal('jerry', 'browon')

#print object attribute 
print(tom.species)
print(jerry.species)

