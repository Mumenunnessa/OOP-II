# -*- coding: utf-8 -*-
"""Lab 6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r8JCLea6pHsAQQ4VYblqZpmUvHtp-5ec

#Create a Dictionary
using `dict()` or `{}`
"""

city = dict()
city

city

city['Dhanmondi'] = 1205

city['Cantonment'] = 1206

city

# Determining if a Dictionary Is Empty or not
len(city)

# Another way
# Determining if a Dictionary Is Empty or not
if city:
  print('not empty')
else:
  print('empty')

"""Homework - *If want to empty a dictionary then use `.clear()` method*

## *Self-check* 
True/False - Are Dictionaries may contain duplicate keys ??
"""

# Remember indexing isn't work 
city[0]

"""Iterate a **dictionary** """

print(city)
for area, code in city.items():
  print(f'{area}’s area code is {code}')

"""## Dictionary operations"""

# Accessing a value 
city["Cantonment"]

# Update a value
city['Cantonment'] = 1202
# print to check
city

# updating/insert both key-value respectively
city.update({'Mohammadpur':1207})
# print
city

city.update({'Mohammadpur Housing':	1207})
city

"""Magic ? ? """

city.update({'Mohammadpur': 1208})
city

"""hurrah ! working ~~~"""

# Adding a new key-value pair
city['Mirpur'] = 1212
# print to check
city

# remove a key-value pair
del city['Cantonment']
# print
city

"""Homework - *remove also work in another method `.pop(key_name)`*

## Compare two dictionaries
"""

country_capitals1 = {'Belgium': 'Brussels','Haiti': 'Port-au-Prince'}
country_capitals2 = {'Nepal': 'Kathmandu', 'Uruguay': 'Montevideo'}

country_capitals1 == country_capitals2

country_capitals3 = {'Haiti': 'Port-au-Prince', 'Belgium': 'Brussels'}

country_capitals1 == country_capitals3

"""# Set"""

colors = {'red', 'orange', 'yellow', 'green', 'red', 'blue'}
colors

"""oho - set is already sorted """

len(colors)

'red' in colors

'purple' in colors

"""`.upper()` used for uppercase all charachters/letters"""

for color in colors:
  print(color.upper(), end=' ')

"""### Set methods"""

numbers = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}

numbers

# Add element
numbers.add(17)

numbers.add(3)

# Remove specific element
numbers.remove(3)
numbers

# Remove first element
numbers.pop()
numbers

# Empty set 
numbers.clear()
# return an empty set
numbers

"""## Comparing sets"""

{1, 3, 5} == {3, 5, 1}

{1, 3, 5} != {3, 5, 1}

{1, 3, 5}.issubset({3, 5, 1})

{1, 2}.issubset({3, 5, 1})

{1, 3, 5}.issuperset({3, 5, 1})

{1, 3, 5}.issuperset({3, 2})

"""### Union
The union of two sets is a set consisting of all the unique elements from both sets. You can calculate the union with the | operator or with the set type’s `union` method:
"""

{1, 3, 5} | {2, 3, 4}

{1, 3, 5}.union([20, 20, 3, 40, 40])

"""### Intersection
The intersection of two sets is a set consisting of all the unique elements that the two sets
have in common. You can calculate the intersection with the & operator or with the set
type’s `intersection` method
"""

{1, 3, 5} & {2, 3, 4}

{1, 3, 5}.intersection([1, 2, 2, 3, 3, 4, 4])

"""### Difference
The difference between two sets is a set consisting of the elements in the left operand that
are not in the right operand. You can calculate the difference with the - operator or with
the set type’s `difference` method:
"""

{1, 3, 5} - {2, 3, 4}

{1, 3, 5, 7}.difference([2, 2, 3, 3, 4, 4])

"""### Disjoint
Two sets are disjoint if they do not have any common elements. You can determine this
with the set type’s `isdisjoint` method:
"""

{1, 3, 5}.isdisjoint({2, 4, 6})

{1, 3, 5}.isdisjoint({4, 6, 1})